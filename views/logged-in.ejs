<!DOCTYPE html>
<html ng-app="ActivityOverlord">
  <head>
    <title>Welcome back!</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/bootstrap.3.1.1.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->

    <!--Added this so the client has access to the csrf tag and it's grabbed first service side on every page -->
      <script type="text/javascript">
      window.BOOTSTRAPPED_DATA = {
        csrf: '<%= _csrf %>',
        me: {
          id: '<%= me.id %>',
          name: '<%= me.name %>',
          isAdmin: <%= me.isAdmin %>
        }
      };
      </script>

  </head>

  <body ng-controller="AdminDashboardCtrl" ng-cloak>


  <!-- container = Fixed-width container container-fluid = full-width -->
  <div class="container-fluid">
    <!-- Creates the navbar -->
    <nav class="navbar navbar-default navbar-inverse">
        <!-- This creates the mechanism for collapse button -->
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
          <!-- This controls the number of lines in the image when the nav collapse -->
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </button>
        <!-- This is the brand on the left-hand side. -->
        <a class="navbar-brand" href="/"> activityOverlord</a>
      <!-- This is what is the above collapse button points to when the mark-up below is collapsed -->
      <div class="collapse navbar-collapse" ng-controller="navBarController">
        <!-- This is what "styles" the li's as navbar items -->
        <ul class="nav navbar-nav" >
          <li ng-class="{'active':getClass('/users')}"><a ng-click="getUserList()">User Administration</a></li>
              <li><a href="/#signin">Placeholder2</a></li>
        </ul>

        <ul class="nav navbar-nav navbar-right">
        <li class="gravatarSm"><img ng-src="images/default.jpg" width="24" height="24"/></li>
        <li class="activityOverlord active"><a ng-click="getProfile()" class="pointer"> {{userName}}</a></li>
        <!-- <li class="activityOverlord active"><a href="/{{id}}">{{userName}}</a></li> -->

          <!-- navbar-right pulls this element right -->
          <!-- Using ng-show instead of ng-if because we need this mark-up to be in the dom when signup controller
          fires.  If it's not there (which it wouldn't be in the case of ng-if) then the scope of the signup
          controller will not be tied to this element. -->
                <li ng-cloak class="btn btn-default navbar-btn " ng-show="isAuth" ng-click="signOutUser()">sign-out</li>
                <!-- <a ng-controller="signinController" class="btn btn-default navbar-btn navbar-right" href="#" ng-if="!isAuthenticated">sign-in</a> -->

                <!-- Using ng-show instead of ng-if because we need this mark-up to be in the dom when signup controller
          fires.  If it's not there (which it wouldn't be in the case of ng-if) then the scope of the signup
          controller will not be tied to this element. -->

        </ul>

            </div>
      </nav>Â 



    <!-- Angular client-side routes determine the contents of this div. -->
    <div ng-view></div>

  </div>




    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <script type="text/javascript" src="/jst.js"></script>
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/angular.1.3.js"></script>
    <script src="/js/dependencies/angular-route.min.js"></script>
    <script src="/js/dependencies/lodash.min.js"></script>
    <script src="/js/activity-overlord/ActivityOverlord.module.js"></script>
    <script src="/js/activity-overlord/ui-controls/AdminDashboardCtrl.js"></script>
    <script src="/js/activity-overlord/ui-controls/EditUserCtrl.js"></script>
    <script src="/js/activity-overlord/ui-controls/PublicCtrl.js"></script>
    <script src="/js/activity-overlord/ui-controls/UserProfileCtrl.js"></script>
    <script src="/js/activity-overlord/ui-controls/appController.js"></script>
    <script src="/js/activity-overlord/ui-controls/navBarController.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
